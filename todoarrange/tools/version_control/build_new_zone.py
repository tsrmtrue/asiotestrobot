# -*- coding: gbk -*-
import os
import os.path
import sys
sys.path.append('../')
import init_tool
import version_control_global_setting as vcgs
import server_config_parse as scp
import signal
def build_mysql_ini(server_conf, server_root_path, server_id):
    print server_conf
    dbname = server_conf["db"]
    mysql_root_path = server_root_path + "/" + vcgs.g_mysql_instance_name
    dbport = server_conf["db_port"]
    
    mysql_ini_template = """# For advice on how to change settings please see
# http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html
# *** DO NOT EDIT THIS FILE. It's a template which will be copied to the
# *** default location during install, and will be replaced if you
# *** upgrade to a newer version of MySQL.

[mysqld]

# Remove leading # and set to the amount of RAM for the most important data
# cache in MySQL. Start at 70%% of total RAM for dedicated server, else 10%%.
innodb_buffer_pool_size = 16M

# Remove leading # to turn on a very important data integrity option: logging
# changes to the binary log between backups.
log_bin=mysql_binlog_%(dbname)s
binlog-do-db = %(dbname)s
expire_logs_days = 30


# These are commonly set, remove the # and set as required.
basedir = %(mysql_root_path)s
datadir = %(mysql_root_path)s/data/
port = %(dbport)s
server_id = %(server_id)d


# Remove leading # to set options mainly useful for reporting servers.
# The server defaults are faster for transactions and fast SELECTs.
# Adjust sizes as needed, experiment to find the optimal values.
join_buffer_size = 128M
sort_buffer_size = 2M
read_rnd_buffer_size = 2M 

sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 
"""
    return mysql_ini_template%(locals())

def build_server_start_batch(server_root, isPassport=False):
    disk_root = vcgs.g_disk_root
    server_start_template = """%(disk_root)s
SET GS_PATH="%(server_root)s/gameserver/Debug"
cd %%GS_PATH%%
gs.exe
"""
    if isPassport:
        server_start_template = """%(disk_root)s
SET PS_PATH="%(server_root)s/passportserver/Debug"
cd %%PS_PATH%%
ps.exe
"""
    return server_start_template%(locals())

def build_server_terminate_batch(server_root):
    disk_root = vcgs.g_disk_root
    server_terminate_template = """cd %(server_root)s
call pack_db.bat
cd %(server_root)s
call terminateServer.bat
"""
    return server_terminate_template%(locals())


def build_mysql_start_batch(mysql_root):
    disk_root = vcgs.g_disk_root
    mysql_start_template = """%(disk_root)s
SET MYSQL_PATH="%(mysql_root)s/bin"
cd %%MYSQL_PATH%%
mysqld.exe --console
"""
    return mysql_start_template%(locals()) 

def build_mysql_stop_batch(mysql_root, mysql_port):
    disk_root = vcgs.g_disk_root
    mysql_stop_template = """%(disk_root)s
SET MYSQL_PATH="%(mysql_root)s/bin"
cd %%MYSQL_PATH%%
mysqladmin --port=%(mysql_port)s -uroot -proot shutdown
echo "finidh"
"""
    return mysql_stop_template%(locals()) 

def build_pack_db_batch( server_id, isPassport=False):
    template = """e:
SET BASE_PATH=".\"
cd %%BASE_PATH%%
SET DBPATH=mysql5611
SET DBNAME=%(db_name)s
echo %%date%%
echo %%time%%
set BACKPATH="%%DBNAME%%_back_%%date:~0,4%%_%%date:~5,2%%_%%date:~8,2%%_%%time:~0,2%%_%%time:~3,2%%_%%time:~6,5%%"
echo %%BACKPATH%%
md %%BACKPATH%%
xcopy %%DBPATH%%\data\%%DBNAME%%\*.*  %%BACKPATH%%
7z a %%BACKPATH%%.7z %%BACKPATH%%
del %%BACKPATH%% /f /q /s
rd %%BACKPATH%%

call save_repo_path

echo %%BACK_UP_PATH_DB%%

xcopy %%BACKPATH%%.7z %%BACK_UP_PATH_DB%%
cd %%BACK_UP_PATH_DB%%
#svn add %%BACKPATH%%.7z --force
#svn ci -m "test"
"""
    db_name = "lj_game_db_%s"%(server_id)
    if isPassport:
        db_name = "lj_passport_%d"%(int(server_id)%10000)
    return template%(locals())

def get_server_instance_name(isPassport=False):
    if isPassport:
        return "passport_server_"
    else :
        return "lj_server_"
    
def get_server_id_filename(isPassport=False):
    if isPassport:
        return "passport_server_id.txt"
    else :
        return "server_id.txt"
    
def get_init_db_file(isPassport=False):
    if isPassport:
        return "init_db_passport.py"
    else :
        return "init_db.py"
    


def create_server_instance(server_version, server_id, isPassport=False):
    #创建目标新目录
    instance_path = vcgs.g_server_instance_path
    server_instance_name = get_server_instance_name(isPassport)
    new_server_path = "%(instance_path)s/%(server_instance_name)s%(server_id)d"%(locals())
    if not os.path.isdir(new_server_path):
        os.makedirs(new_server_path)
    else:
        print "the server path already exists ",new_server_path
        return False
    #拷贝server目录
    unzip_path = vcgs.g_unzip_path
    src_path = "%(unzip_path)s/%(server_version)s"%(locals())
    try:
        vcgs.copytree(src_path, new_server_path)
    except Error as e:
        print e
        return False
    #拷贝数据库目录
    new_mysql_path = new_server_path+"/"+vcgs.g_mysql_instance_name
    src_mysql_path = "%(unzip_path)s/mysql5611_master"%(locals())
    try:
        vcgs.copytree(src_mysql_path, new_mysql_path)
    except Error as e:
        print e
        return False
    server_conf_dict_file = new_server_path + "/cfg/fuwuqipeizhi_utf8.csv"
    server_conf_dict = scp.get_server_cfg(server_conf_dict_file, server_id)
    #使用serverid 生成 mysql的配置文件 my.ini ,创建表格的sql语句,createrole的id的起始值要更改,服从分配
    mysql_ini_str = build_mysql_ini(server_conf_dict, new_server_path, server_id)
    w = open('%(new_mysql_path)s/my.ini'%(locals()), 'w')
    w.write(mysql_ini_str)
    w.close()
    #使用serverid 生成server的配置文件
    #id的配置
    server_id_filename = get_server_id_filename(isPassport)
    w = open('%(new_server_path)s/%(server_id_filename)s'%(locals()), 'w')
    w.write("%(server_id)d"%(locals()))
    w.close()
    #log目录创建
    os.makedirs('%(new_server_path)s/log'%(locals()))
    #svn脚本初始化-2013-10-27自动打包,不需要执行
    #os.system('%(new_server_path)s/init_svn.bat'%(locals()))
    #配置脚本生成
    os.chdir("%(new_server_path)s/tools"%(locals()))
    w = open("server_cfg.py", 'w')
    w.write(init_tool.get_server_cfg(server_conf_dict))
    w.close()
    w = open("global_path.py", 'w')
    w.write(init_tool.get_global_cfg())
    w.close()

    #os.system("%(new_server_path)s/tools/init_tool.py"%(locals()))
    
    os.chdir("%(instance_path)s"%(locals()))
    #生成mysql启动脚本
    w = open('start_mysql_%d.bat'%(server_id), 'w')
    w.write(build_mysql_start_batch(new_mysql_path))
    w.close()

    #生成mysql关闭脚本
    w = open('stop_mysql_%d.bat'%(server_id), 'w')
    w.write(build_mysql_stop_batch(new_mysql_path, server_conf_dict["db_port"]))
    w.close()

    #生成server启动脚本
    w = open('start_server_%d.bat'%(server_id), 'w')
    w.write(build_server_start_batch(new_server_path, isPassport))
    w.close()

    #生成server关闭脚本
    w = open('terminate_server_%d.bat'%(server_id), 'w')
    w.write(build_server_terminate_batch(new_server_path))
    w.close()
    
    #生成备份数据库脚本
    w = open('%(new_server_path)s/pack_db.bat'%(locals()), 'w')
    w.write(build_pack_db_batch(server_id, isPassport))
    w.close()
    
    
    #启动mysql
    import subprocess  
    p_mysqld = subprocess.Popen("start_mysql_%d.bat"%(server_id), stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell = True)  
    #os.system("start_mysql_%d.bat"%(server_id))
    #执行初始化数据库代码
    import time
    time.sleep(5)
    os.chdir("%(new_server_path)s/tools/db_handle"%(locals()))
    init_db_filename = get_init_db_file(isPassport)
    os.system(init_db_filename)
    #关闭进程
    time.sleep(5)
    #p_mysqld.send_signal(signal.SIGTERM)
    #p_mysqld.wait()
    os.chdir("%(instance_path)s"%(locals()))
    os.system("stop_mysql_%d.bat"%(server_id))
    #p_mysqld_t = subprocess.Popen("stop_mysql_%d.bat"%(server_id), stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell = True)  
    #p_mysqld_t.send_signal(signal.SIGTERM)
    #p_mysqld_t.wait()
    print "p_mysqld wait over "
    
create_server_instance("PS_2013_11_14_17_42_08.29", 10001, True)
create_server_instance("GS_2013_11_14_17_41_44.71", 4)

print "OK"

